#!/usr/bin/env python3

import argparse
import base64
import json
import os
import re
import subprocess
import sys
import yaml
from os import path

config = {}

def main(argv):
    parser = argparse.ArgumentParser()

    parser.add_argument("main", type=str, help="main input file")
    parser.add_argument("output", type=str, help="output file as json")
    parser.add_argument("-c", "--config", type=str, default=None, help="config file")
    parser.add_argument("-p", "--prety_print", action='store_true', default=False, help="prety print output json")

    argv = parser.parse_args(argv)

    main_file = argv.main

    # if config is provided, then process it multiple time until reach terminal state
    if argv.config != None:
        try:
            global config
            with open(argv.config) as file:
                new_config = yaml.load(file)
            while True:
                config = new_config
                new_config = process_object(path.dirname(argv.config), config)
                if new_config == config:
                    break
        except Exception as e:
            raise Exception("Error on processing config file") from e

    root = json.dumps(
        TVLK.FromFile(path.dirname(main_file), path.basename(main_file)),
        indent=2 if argv.prety_print else None
    )

    with open(argv.output, 'w') as file:
        file.write(root)

# generic object processsor
# recursive if complex object and return value if simple type
def process_object(cwd, what):
    if isinstance(what, list):
        return [process_object(cwd, item) for item in what]

    if isinstance(what, dict):
        ret = {}
        for key in what:
            match = re.search(r'^TVLK::(.*)$', key)
            if match:
                if len(what) == 1:
                    return getattr(TVLK, match.group(1))(cwd, what[key])
                else:
                    raise Exception("function '%s' must not have sibling" % key)
                    # because it will raise ambiguity and inconsistency issue
            else:
                ret[key] = process_object(cwd, what[key])
        return ret

    return what


# This class is place holder for every TVLK::<function>
# first argument is current directory of file that being processed
# second argument can be arbitary data that passed by yaml document
class TVLK:

    # Parse yaml file
    # Return : arbitary object, depend on content of file
    def FromFile(cwd, file_name):
        file_name = path.join(cwd, file_name)
        try:
            ret = {}
            with open(file_name) as file:
                ret = yaml.load(file)
            return process_object(path.dirname(file_name), ret)

        except Exception as e:
            raise Exception("Error Processing file '%s'" % file_name) from e

    # Parse every yaml (with yml or yaml extension) inside a folder, and combine into single list
    # Return : list of Object of every yaml file in that folder
    def ArrayFromFolder(cwd, folder):
        ret = []
        cwd = path.join(cwd, folder)

        for file_name in sorted(os.listdir(cwd)):
            match = re.search(r'^(.*)\.(yml|yaml)$', file_name)
            if match:
                ret.append(TVLK.FromFile(cwd, file_name))

        return ret

    # Parse every yaml (with yml or yaml extension) inside a folder, and combine into single object
    # Return : Object with keys that correspondent to filename of every yaml file in that folder
    def FromFolder(cwd, folder):
        ret = {}
        cwd = path.join(cwd, folder)

        for file_name in os.listdir(cwd):
            match = re.search(r'^(.*)\.(yml|yaml)$', file_name)
            if match:
                ret[match.group(1)] = TVLK.FromFile(cwd, file_name)

        return ret

    # Convert string, to Base64 string, input must be a string
    # Return : String
    def Base64(cwd, obj):
        if not isinstance(obj, str):
            raise Exception("Parameter is not a string")
        return base64.b64encode(obj.encode("utf8")).decode("utf8")

    # Read file, file must be encoded in utf8
    # Return : String
    def ReadTextFile(cwd, file_name):
        file_name = path.join(cwd, file_name)
        with open(file_name, "r") as file:
            return file.read()

    # Read file
    # Return : Base64 representation of that file
    def Base64OfFile(cwd, file_name):
        file_name = path.join(cwd, file_name)
        with open(file_name, "rb") as file:
            return base64.b64encode(file.read()).decode("utf8")

    # Run a command, and return stdout of that command, must be formated in utf8 encoding
    # command is executed with current directory pointed to same directory that contain the yaml file
    # Return : String
    def RunCommand(cwd, argv):
        proc = subprocess.Popen(argv, cwd=cwd, stdout=subprocess.PIPE)
        outs, errs = proc.communicate()
        if proc.returncode != 0:
            raise Exception("RunCommand retured with exit code %d" % proc.returncode)

        return outs.decode('utf8')

    # Get arbitary data from config
    # Return : can be anything
    def Config(cwd, key_list):
        try:
            ret = config
            for key in key_list:
                ret = ret[key]

        except Exception as e:
            raise Exception("Cannot retrieve data from configuration") from e

        return ret

    # Merge multiple objects into single object, every key in each object must be mutualy exclusive
    # Return : Object
    def Merge(cwd, obj_list):
        ret = {}
        obj_list = process_object(cwd, obj_list)
        for item in obj_list:
            for key in item:
                if key in ret:
                    raise Exception("'%s' is already declared" % key)
                ret[key] = item[key]

        return ret

    # Merge multiple list into single list
    # Return : list
    def MergeList(cwd, list_list):
        ret = []
        list_list = process_object(cwd, list_list)
        for item in list_list:
            ret.extend(item)

        return ret

    # Concat string
    def Concat(cwd, obj_list):
        obj_list = process_object(cwd, obj_list)
        return "".join(obj_list)

    def If(cwd, argv):
        cond = argv[0]
        result_true = argv[1]
        result_false = argv[2]
        if process_object(cwd, cond):
            return process_object(cwd, result_true)
        else:
            return process_object(cwd, result_false)

    def Equals(cwd, argv):
        obj1 = argv[0]
        obj2 = argv[1]
        return process_object(cwd, obj1) == process_object(cwd, obj2)

    def Not(cwd, cond):
        return not process_object(cwd, cond)

    def And(cwd, argv):
        cond1 = argv[0]
        cond2 = argv[1]
        return process_object(cwd, cond1) and process_object(cwd, cond2)

    def Or(cwd, argv):
        cond1 = argv[0]
        cond2 = argv[1]
        return process_object(cwd, cond1) or process_object(cwd, cond2)

    # Select an item from list
    def Select(cwd, argv):
        index = argv[0]
        collection = argv[1]
        return process_object(cwd, collection[index])


if __name__ == '__main__':
    main(sys.argv[1:])
